(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{352:function(a,e,t){"use strict";t.r(e);var r=t(42),n=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"开启docker-buildx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启docker-buildx"}},[a._v("#")]),a._v(" 开启docker buildx")]),a._v(" "),t("p",[a._v("在/root/.docker目录下有一个config.json文件，加上")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('"experimental" : "enabled"\n')])])]),t("p",[a._v("重启docker")]),a._v(" "),t("h3",{attrs:{id:"验证是否开启"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证是否开启"}},[a._v("#")]),a._v(" 验证是否开启")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker buildx version\ngithub.com/docker/buildx v0.3.1-tp-docker 6db68d029599c6710a32aa7adcba8e5a344795a7\n")])])]),t("p",[a._v("如果在某些系统上设置环境变量 DOCKER_CLI_EXPERIMENTAL 不生效（比如 Arch Linux）,你可以选择从源代码编译：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → export DOCKER_BUILDKIT=1\n🐳 → docker build --platform=local -o . git://github.com/docker/buildx\n🐳 → mkdir -p ~/.docker/cli-plugins && mv buildx ~/.docker/cli-plugins/docker-buildx\n")])])]),t("h2",{attrs:{id:"启用-binfmt-misc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启用-binfmt-misc"}},[a._v("#")]),a._v(" 启用 binfmt_misc")]),a._v(" "),t("blockquote",[t("p",[a._v("如果你使用的是 Docker 桌面版（MacOS 和 Windows），默认已经启用了 binfmt_misc，可以跳过这一步。\n如果你使用的是 Linux，需要手动启用 binfmt_misc。大多数 Linux 发行版都很容易启用，不过还有一个更容易的办法，直接运行一个特权容器，容器里面写好了设置脚本：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d    \n")])])]),t("blockquote",[t("p",[a._v("建议将 Linux 内核版本升级到 4.x 以上，特别是 CentOS 用户，你可能会遇到错误。\n验证是 binfmt_misc 否开启：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → ls -al /proc/sys/fs/binfmt_misc/\n总用量 0\n总用量 0\n-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-aarch64\n-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-arm\n-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-ppc64le\n-rw-r--r-- 1 root root 0 11月 18 00:12 qemu-s390x\n--w------- 1 root root 0 11月 18 00:09 register\n-rw-r--r-- 1 root root 0 11月 18 00:12 status\n")])])]),t("p",[a._v("验证是否启用了相应的处理器：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → cat /proc/sys/fs/binfmt_misc/qemu-aarch64\nenabled\ninterpreter /usr/bin/qemu-aarch64\nflags: OCF\noffset 0\nmagic 7f454c460201010000000000000000000200b7\nmask ffffffffffffff00fffffffffffffffffeffff\n")])])]),t("h2",{attrs:{id:"从默认的构建器切换到多平台构建器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从默认的构建器切换到多平台构建器"}},[a._v("#")]),a._v(" 从默认的构建器切换到多平台构建器")]),a._v(" "),t("p",[a._v("创建一个新的构建器：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker buildx create --use --name mybuilder\n")])])]),t("p",[a._v("启动构建器：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker buildx inspect mybuilder --bootstrap\n\n[+] Building 5.0s (1/1) FINISHED\n => [internal] booting buildkit                                                                                                                          5.0s\n => => pulling image moby/buildkit:buildx-stable-1                                                                                                       4.4s\n => => creating container buildx_buildkit_mybuilder0                                                                                                     0.6s\nName:   mybuilder\nDriver: docker-container\n\nNodes:\nName:      mybuilder0\nEndpoint:  unix:///var/run/docker.sock\nStatus:    running\nPlatforms: linux/amd64, linux/arm64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6\n")])])]),t("p",[a._v("查看当前使用的构建器及构建器支持的 CPU 架构，可以看到支持很多 CPU 架构：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker buildx ls\n\nNAME/NODE    DRIVER/ENDPOINT             STATUS  PLATFORMS\nmybuilder *  docker-container\n  mybuilder0 unix:///var/run/docker.sock running linux/amd64, linux/arm64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6\ndefault      docker\n  default    default                     running linux/amd64, linux/386\n")])])]),t("h2",{attrs:{id:"构建多平台镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建多平台镜像"}},[a._v("#")]),a._v(" 构建多平台镜像")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker buildx build -t maodou38/downloader --platform=linux/arm,linux/arm64,linux/amd64 . --push\n")])])]),t("blockquote",[t("p",[a._v("需要提前通过 docker login 命令登录认证 Docker Hub。\n如果想将构建好的镜像保存在本地，可以将 type 指定为 docker，但必须分别为不同的 CPU 架构构建不同的镜像，不能合并成一个镜像，即：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker buildx build -t maodou38/downloader --platform=linux/arm -o type=docker .\n🐳 → docker buildx build -t maodou38/downloader --platform=linux/arm64 -o type=docker .\n🐳 → docker buildx build -t maodou38/downloader --platform=linux/amd64 -o type=docker .\n")])])]),t("h2",{attrs:{id:"测试多平台镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试多平台镜像"}},[a._v("#")]),a._v(" 测试多平台镜像")]),a._v(" "),t("p",[a._v("首先列出每个镜像的 digests：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker buildx imagetools inspect maodou38/downloader\n\nName:      docker.io/maodou38/downloader:latest\nMediaType: application/vnd.docker.distribution.manifest.list.v2+json\nDigest:    sha256:ec55f5ece9a12db0c6c367acda8fd1214f50ee502902f97b72f7bff268ebc35a\n\nManifests:\n  Name:      docker.io/maodou38/downloader:latest@sha256:38e083870044cfde7f23a2eec91e307ec645282e76fd0356a29b32122b11c639\n  MediaType: application/vnd.docker.distribution.manifest.v2+json\n  Platform:  linux/arm/v7\n\n  Name:      docker.io/maodou38/downloader:latest@sha256:de273a2a3ce92a5dc1e6f2d796bb85a81fe1a61f82c4caaf08efed9cf05af66d\n  MediaType: application/vnd.docker.distribution.manifest.v2+json\n  Platform:  linux/arm64\n\n  Name:      docker.io/maodou38/downloader:latest@sha256:8b735708d7d30e9cd6eb993449b1047b7229e53fbcebe940217cb36194e9e3a2\n  MediaType: application/vnd.docker.distribution.manifest.v2+json\n  Platform:  linux/amd64\n")])])]),t("p",[a._v("运行每一个镜像并观察输出结果：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("🐳 → docker run --rm docker.io/maodou38/downloader:latest@sha256:38e083870044cfde7f23a2eec91e307ec645282e76fd0356a29b32122b11c639\nHello, arm!\n\n🐳 → docker run --rm docker.io/maodou38/downloader:latest@sha256:de273a2a3ce92a5dc1e6f2d796bb85a81fe1a61f82c4caaf08efed9cf05af66d\nHello, arm64!\n\n🐳 → docker run --rm docker.io/maodou38/downloader:latest@sha256:8b735708d7d30e9cd6eb993449b1047b7229e53fbcebe940217cb36194e9e3a2\nHello, amd64!\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);