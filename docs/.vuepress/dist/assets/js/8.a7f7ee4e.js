(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{357:function(e,a,s){"use strict";s.r(a);var t=s(42),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("模板文件是使用 Compose 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。")]),e._v(" "),s("p",[e._v("默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3"\n\nservices:\n  webapp:\n    image: examples/web\n    ports:\n      - "80:80"\n    volumes:\n      - "/data"\n')])])]),s("p",[e._v("注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）等来自动构建生成镜像。\n如果使用 build 指令，在 Dockerfile 中设置的选项(例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设置。")]),e._v(" "),s("p",[e._v("下面分别介绍各个指令的用法。")]),e._v(" "),s("h2",{attrs:{id:"build"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[e._v("#")]),e._v(" build")]),e._v(" "),s("p",[e._v("指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3'\nservices:\n\n  webapp:\n    build: ./dir\n")])])]),s("p",[e._v("你也可以使用 context 指令指定 Dockerfile 所在文件夹的路径。\n使用 dockerfile 指令指定 Dockerfile 文件名。\n使用 arg 指令指定构建镜像时的变量。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3'\nservices:\n\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n")])])]),s("p",[e._v("使用 cache_from 指定构建镜像的缓存")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("build:\n  context: .\n  cache_from:\n    - alpine:latest\n    - corp/web_app:3.14\n")])])]),s("h2",{attrs:{id:"cap-add-cap-drop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cap-add-cap-drop"}},[e._v("#")]),e._v(" cap_add, cap_drop")]),e._v(" "),s("p",[e._v("指定容器的内核能力（capacity）分配。")]),e._v(" "),s("p",[e._v("例如，让容器拥有所有能力可以指定为：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cap_add:\n  - ALL\n")])])]),s("p",[e._v("去掉 NET_ADMIN 能力可以指定为：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cap_drop:\n  - NET_ADMIN\n")])])]),s("h2",{attrs:{id:"command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#command"}},[e._v("#")]),e._v(" command")]),e._v(" "),s("p",[e._v("覆盖容器启动后默认执行的命令。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('command: echo "hello world"\n')])])]),s("h2",{attrs:{id:"configs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configs"}},[e._v("#")]),e._v(" configs")]),e._v(" "),s("p",[e._v("仅用于 Swarm mode")]),e._v(" "),s("h2",{attrs:{id:"cgroup-parent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cgroup-parent"}},[e._v("#")]),e._v(" cgroup_parent")]),e._v(" "),s("p",[e._v("指定父 cgroup 组，意味着将继承该组的资源限制。")]),e._v(" "),s("p",[e._v("例如，创建了一个 cgroup 组名称为 cgroups_1。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cgroup_parent: cgroups_1\n")])])]),s("h2",{attrs:{id:"container-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#container-name"}},[e._v("#")]),e._v(" container_name")]),e._v(" "),s("p",[e._v("指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("container_name: docker-web-container\n")])])]),s("p",[e._v("注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。")]),e._v(" "),s("h2",{attrs:{id:"deploy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#deploy"}},[e._v("#")]),e._v(" deploy")]),e._v(" "),s("p",[e._v("仅用于 Swarm mode")]),e._v(" "),s("h2",{attrs:{id:"devices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#devices"}},[e._v("#")]),e._v(" devices")]),e._v(" "),s("p",[e._v("指定设备映射关系。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('devices:\n  - "/dev/ttyUSB1:/dev/ttyUSB0"\n')])])]),s("h2",{attrs:{id:"depends-on"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#depends-on"}},[e._v("#")]),e._v(" depends_on")]),e._v(" "),s("p",[e._v("解决容器的依赖、启动先后的问题。以下例子中会先启动 redis db 再启动 web")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3'\n\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n\n  redis:\n    image: redis\n\n  db:\n    image: postgres\n")])])]),s("p",[e._v("注意：web 服务不会等待 redis db 「完全启动」之后才启动。")]),e._v(" "),s("h2",{attrs:{id:"dns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[e._v("#")]),e._v(" dns")]),e._v(" "),s("p",[e._v("自定义 DNS 服务器。可以是一个值，也可以是一个列表。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("dns: 8.8.8.8\n\ndns:\n  - 8.8.8.8\n  - 114.114.114.114\n")])])]),s("h2",{attrs:{id:"dns-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-search"}},[e._v("#")]),e._v(" dns_search")]),e._v(" "),s("p",[e._v("配置 DNS 搜索域。可以是一个值，也可以是一个列表。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("dns_search: example.com\n\ndns_search:\n  - domain1.example.com\n  - domain2.example.com\n")])])]),s("h2",{attrs:{id:"tmpfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tmpfs"}},[e._v("#")]),e._v(" tmpfs")]),e._v(" "),s("p",[e._v("挂载一个 tmpfs 文件系统到容器。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("tmpfs: /run\ntmpfs:\n  - /run\n  - /tmp\n")])])]),s("h2",{attrs:{id:"env-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env-file"}},[e._v("#")]),e._v(" env_file")]),e._v(" "),s("p",[e._v("从文件中获取环境变量，可以为单独的文件路径或列表。")]),e._v(" "),s("p",[e._v("如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。")]),e._v(" "),s("p",[e._v("如果有变量名称与 environment 指令冲突，则按照惯例，以后者为准。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("env_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n")])])]),s("p",[e._v("环境变量文件中每一行必须符合格式，支持 # 开头的注释行。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# common.env: Set development environment\nPROG_ENV=development\n")])])]),s("h2",{attrs:{id:"environment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#environment"}},[e._v("#")]),e._v(" environment")]),e._v(" "),s("p",[e._v("设置环境变量。你可以使用数组或字典两种格式。")]),e._v(" "),s("p",[e._v("只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("environment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - RACK_ENV=development\n  - SESSION_SECRET\n")])])]),s("p",[e._v("如果变量名称或者值中用到 true|false，yes|no 等表达 布尔 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF\n")])])]),s("h2",{attrs:{id:"expose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[e._v("#")]),e._v(" expose")]),e._v(" "),s("p",[e._v("暴露端口，但不映射到宿主机，只被连接的服务访问。\n仅可以指定内部端口为参数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('expose:\n - "3000"\n - "8000"\n')])])]),s("h2",{attrs:{id:"external-links"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#external-links"}},[e._v("#")]),e._v(" external_links")]),e._v(" "),s("p",[s("s",[e._v("注意：不建议使用该指令。")]),e._v("\n链接到 docker-compose.yml 外部的容器，甚至并非 Compose 管理的外部容器。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("external_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql\n")])])]),s("h2",{attrs:{id:"extra-hosts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extra-hosts"}},[e._v("#")]),e._v(" extra_hosts")]),e._v(" "),s("p",[e._v("类似 Docker 中的 --add-host 参数，指定额外的 host 名称映射信息。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('extra_hosts:\n - "googledns:8.8.8.8"\n - "dockerhub:52.1.157.61"\n')])])]),s("p",[e._v("会在启动后的服务容器中 /etc/hosts 文件中添加如下两条条目。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("8.8.8.8 googledns\n52.1.157.61 dockerhub\n")])])]),s("h2",{attrs:{id:"healthcheck"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck"}},[e._v("#")]),e._v(" healthcheck")]),e._v(" "),s("p",[e._v("通过命令检查容器是否健康运行。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('healthcheck:\n  test: ["CMD", "curl", "-f", "http://localhost"]\n  interval: 1m30s\n  timeout: 10s\n  retries: 3\n')])])]),s("h2",{attrs:{id:"image"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#image"}},[e._v("#")]),e._v(" image")]),e._v(" "),s("p",[e._v("指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("image: ubuntu\nimage: orchardup/postgresql\nimage: a4bc65fd\n")])])]),s("h2",{attrs:{id:"labels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#labels"}},[e._v("#")]),e._v(" labels")]),e._v(" "),s("p",[e._v("为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('labels:\n  com.startupteam.description: "webapp for a startup team"\n  com.startupteam.department: "devops department"\n  com.startupteam.release: "rc3 for v1.0"\n')])])]),s("h2",{attrs:{id:"links"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[e._v("#")]),e._v(" links")]),e._v(" "),s("p",[s("s",[e._v("注意：不推荐使用该指令。")])]),e._v(" "),s("h2",{attrs:{id:"logging"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" logging")]),e._v(" "),s("p",[e._v("配置日志选项。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('logging:\n  driver: syslog\n  options:\n    syslog-address: "tcp://192.168.0.42:123"\n')])])]),s("p",[e._v("目前支持三种日志驱动类型。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('driver: "json-file"\ndriver: "syslog"\ndriver: "none"\n')])])]),s("p",[e._v("options 配置日志驱动的相关参数。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('options:\n  max-size: "200k"\n  max-file: "10"\n')])])]),s("h2",{attrs:{id:"network-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#network-mode"}},[e._v("#")]),e._v(" network_mode")]),e._v(" "),s("p",[e._v("设置网络模式。使用和 docker run 的 --network 参数一样的值。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('network_mode: "bridge"\nnetwork_mode: "host"\nnetwork_mode: "none"\nnetwork_mode: "service:[service name]"\nnetwork_mode: "container:[container name/id]"\n')])])]),s("h2",{attrs:{id:"networks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#networks"}},[e._v("#")]),e._v(" networks")]),e._v(" "),s("p",[e._v("配置容器连接的网络。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3"\nservices:\n\n  some-service:\n    networks:\n     - some-network\n     - other-network\n\nnetworks:\n  some-network:\n  other-network:\n')])])]),s("h2",{attrs:{id:"pid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pid"}},[e._v("#")]),e._v(" pid")]),e._v(" "),s("p",[e._v("跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('pid: "host"\n')])])]),s("h2",{attrs:{id:"ports"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ports"}},[e._v("#")]),e._v(" ports")]),e._v(" "),s("p",[e._v("暴露端口信息。\n使用宿主端口：容器端口 (HOST:CONTAINER) 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('ports:\n - "3000"\n - "8000:8000"\n - "49100:22"\n - "127.0.0.1:8001:8001"\n')])])]),s("p",[e._v("注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。")]),e._v(" "),s("h2",{attrs:{id:"secrets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#secrets"}},[e._v("#")]),e._v(" secrets")]),e._v(" "),s("p",[e._v("存储敏感数据，例如 mysql 服务密码。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3.1"\nservices:\n\nmysql:\n image: mysql\n environment:\n   MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password\n secrets:\n   - db_root_password\n   - my_other_secret\n\nsecrets:\n my_secret:\n   file: ./my_secret.txt\n my_other_secret:\n   external: true\n')])])]),s("h2",{attrs:{id:"security-opt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#security-opt"}},[e._v("#")]),e._v(" security_opt")]),e._v(" "),s("p",[e._v("指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("security_opt:\n    - label:user:USER\n    - label:role:ROLE\n")])])]),s("h2",{attrs:{id:"stop-signal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stop-signal"}},[e._v("#")]),e._v(" stop_signal")]),e._v(" "),s("p",[e._v("设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("stop_signal: SIGUSR1\n")])])]),s("h2",{attrs:{id:"sysctls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sysctls"}},[e._v("#")]),e._v(" sysctls")]),e._v(" "),s("p",[e._v("配置容器内核参数。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n")])])]),s("h2",{attrs:{id:"ulimits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ulimits"}},[e._v("#")]),e._v(" ulimits")]),e._v(" "),s("p",[e._v("指定容器的 ulimits 限制值。")]),e._v(" "),s("p",[e._v("例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  ulimits:\n    nproc: 65535\n    nofile:\n      soft: 20000\n      hard: 40000\n")])])]),s("h2",{attrs:{id:"volumes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volumes"}},[e._v("#")]),e._v(" volumes")]),e._v(" "),s("p",[e._v("数据卷所挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。\n该指令中路径支持相对路径。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("volumes:\n - /var/lib/mysql\n - cache/:/tmp/cache\n - ~/configs:/etc/configs/:ro\n")])])]),s("h2",{attrs:{id:"其它指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它指令"}},[e._v("#")]),e._v(" 其它指令")]),e._v(" "),s("p",[e._v("此外，还有包括 domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir 等指令，基本跟 docker run 中对应参数的功能一致。")]),e._v(" "),s("p",[e._v("指定服务容器启动后执行的入口文件。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("entrypoint: /code/entrypoint.sh\n")])])]),s("p",[e._v("指定容器中运行应用的用户名。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("user: nginx\n")])])]),s("p",[e._v("指定容器中工作目录。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("working_dir: /code\n")])])]),s("p",[e._v("指定容器中搜索域名、主机名、mac 地址等。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("domainname: your_website.com\nhostname: test\nmac_address: 08-00-27-00-0C-0A\n")])])]),s("p",[e._v("允许容器中运行一些特权命令。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("privileged: true\n")])])]),s("p",[e._v("指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("restart: always\n")])])]),s("p",[e._v("以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("read_only: true\n")])])]),s("p",[e._v("打开标准输入，可以接受外部输入。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("stdin_open: true\n")])])]),s("p",[e._v("模拟一个伪终端。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("tty: true\n")])])]),s("h2",{attrs:{id:"读取变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取变量"}},[e._v("#")]),e._v(" 读取变量")]),e._v(" "),s("p",[e._v("Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 .env 文件中的变量。")]),e._v(" "),s("p",[e._v("例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION} 的值，并写入执行的指令中。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: "3"\nservices:\n\ndb:\n  image: "mongo:${MONGO_VERSION}"\n')])])]),s("p",[e._v("如果执行 MONGO_VERSION=3.2 docker-compose up 则会启动一个 mongo:3.2 镜像的容器；如果执行 MONGO_VERSION=2.8 docker-compose up 则会启动一个 mongo:2.8 镜像的容器。")]),e._v(" "),s("p",[e._v("若当前目录存在 .env 文件，执行 docker-compose 命令时将从该文件中读取变量。")]),e._v(" "),s("p",[e._v("在当前目录新建 .env 文件并写入以下内容。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 支持 # 号注释\nMONGO_VERSION=3.6\n")])])]),s("p",[e._v("执行 docker-compose up 则会启动一个 mongo:3.6 镜像的容器。")]),e._v(" "),s("h2",{attrs:{id:"常用软件docker-compose文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用软件docker-compose文件"}},[e._v("#")]),e._v(" 常用软件docker-compose文件")]),e._v(" "),s("h3",{attrs:{id:"tomcat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[e._v("#")]),e._v(" Tomcat")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3.1'\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - 8080:8080\n    volumes:\n      - /usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test\n    environment:\n      TZ: Asia/Shanghai\n")])])]),s("h3",{attrs:{id:"mysql5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql5"}},[e._v("#")]),e._v(" Mysql5")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3.1'\nservices:\n  mysql:\n    restart: always\n    image: mysql:5.7.22\n    container_name: mysql\n    ports:\n      - 3306:3306\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n    volumes:\n      - mysql-data:/var/lib/mysql\n\nvolumes:\n  mysql-data:\n")])])]),s("h3",{attrs:{id:"mysql8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql8"}},[e._v("#")]),e._v(" Mysql8")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3.1'\nservices:\n  db:\n    image: mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --default-authentication-plugin=mysql_native_password\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n    ports:\n      - 3306:3306\n    volumes:\n      - ./data:/var/lib/mysql\n\n  adminer:\n    image: adminer\n    restart: always\n    ports:\n      - 8080:8080\n")])])]),s("h3",{attrs:{id:"redis集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis集群"}},[e._v("#")]),e._v(" Redis集群")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3.1'\nservices:\n  master:\n    image: redis\n    container_name: redis-master\n    ports:\n      - 6379:6379\n\n  slave1:\n    image: redis\n    container_name: redis-slave-1\n    ports:\n      - 6380:6379\n    command: redis-server --slaveof redis-master 6379\n\n  slave2:\n    image: redis\n    container_name: redis-slave-2\n    ports:\n      - 6381:6379\n    command: redis-server --slaveof redis-master 6379\n")])])]),s("h3",{attrs:{id:"sentinel集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sentinel集群"}},[e._v("#")]),e._v(" Sentinel集群")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3.1'\nservices:\n  sentinel1:\n    image: redis\n    container_name: redis-sentinel-1\n    ports:\n      - 26379:26379\n    command: redis-sentinel /usr/local/etc/redis/sentinel.conf\n    volumes:\n      - ./sentinel1.conf:/usr/local/etc/redis/sentinel.conf\n\n  sentinel2:\n    image: redis\n    container_name: redis-sentinel-2\n    ports:\n      - 26380:26379\n    command: redis-sentinel /usr/local/etc/redis/sentinel.conf\n    volumes:\n      - ./sentinel2.conf:/usr/local/etc/redis/sentinel.conf\n\n  sentinel3:\n    image: redis\n    container_name: redis-sentinel-3\n    ports:\n      - 26381:26379\n    command: redis-sentinel /usr/local/etc/redis/sentinel.conf\n    volumes:\n      - ./sentinel3.conf:/usr/local/etc/redis/sentinel.conf\n")])])]),s("p",[e._v("修改 Sentinel 配置文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("port 26379\ndir /tmp\n# 自定义集群名，其中 127.0.0.1 为 redis-master 的 ip，6379 为 redis-master 的端口，2 为最小投票数（因为有 3 台 Sentinel 所以可以设置成 2）\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 30000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 180000\nsentinel deny-scripts-reconfig yes\n")])])]),s("h3",{attrs:{id:"jenkins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jenkins"}},[e._v("#")]),e._v(" Jenkins")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("version: '3.1'\nservices:\n  jenkins:\n    restart: always\n    image: jenkinsci/jenkins\n    container_name: jenkins\n    ports:\n      # 发布端口\n      - 8080:8080\n      # 基于 JNLP 的 Jenkins 代理通过 TCP 端口 50000 与 Jenkins master 进行通信\n      - 50000:50000\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n      - ./data:/var/jenkins_home\n")])])]),s("p",[e._v("安装过程中会出现 Docker 数据卷 权限问题，用以下命令解决：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("chown -R 1000 /usr/local/docker/jenkins/data\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);